1:"$Sreact.fragment"
2:I[31362,["/_next/static/chunks/27842a9bf1956628.js"],"default"]
3:I[39756,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
4:I[37457,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"default"]
5:I[22016,["/_next/static/chunks/27842a9bf1956628.js","/_next/static/chunks/2d6d5be5a4d0b156.js","/_next/static/chunks/d4739044ea2ee7bb.js","/_next/static/chunks/89106ff1684e124a.js"],"default"]
7:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"OutletBoundary"]
9:I[11533,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"AsyncMetadataOutlet"]
b:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"ViewportBoundary"]
d:I[97367,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"MetadataBoundary"]
e:"$Sreact.suspense"
10:I[68027,["/_next/static/chunks/27842a9bf1956628.js"],"default"]
:HL["/_next/static/chunks/26108d099754a71e.css","style"]
:HL["/_next/static/media/797e433ab948586e-s.p.dbea232f.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/_next/static/media/caa3a2e1cccd8315-s.p.853070df.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
0:{"P":null,"b":"sA-Ox68I9eR73eASsYKUZ","p":"","c":["","posts","code-highlight-test",""],"i":false,"f":[[["",{"children":["posts",{"children":[["id","code-highlight-test","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/26108d099754a71e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","script","script-0",{"src":"/_next/static/chunks/27842a9bf1956628.js","async":true,"nonce":"$undefined"}]],["$","html",null,{"lang":"zh-CN","children":[["$","head",null,{"children":["$","$L2",null,{}]}],["$","body",null,{"className":"geist_a71539c9-module__T19VSG__variable geist_mono_8d43a2aa-module__8Li5zG__variable antialiased","children":["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100","children":["$","div",null,{"className":"text-center px-4","children":[["$","h1",null,{"className":"text-6xl font-bold text-gray-900 mb-4","children":"404"}],["$","h2",null,{"className":"text-2xl font-semibold text-gray-700 mb-4","children":"页面未找到"}],["$","p",null,{"className":"text-gray-600 mb-8 max-w-md mx-auto","children":"抱歉，您访问的页面不存在。"}],["$","$L5",null,{"href":"/","className":"inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 transition-colors","children":"返回首页"}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","code-highlight-test","d"],["$","$1","c",{"children":[null,["$","$L3",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L4",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L6",[["$","script","script-0",{"src":"/_next/static/chunks/2d6d5be5a4d0b156.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/d4739044ea2ee7bb.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/89106ff1684e124a.js","async":true,"nonce":"$undefined"}]],["$","$L7",null,{"children":["$L8",["$","$L9",null,{"promise":"$@a"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lb",null,{"children":"$Lc"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Ld",null,{"children":["$","div",null,{"hidden":true,"children":["$","$e",null,{"fallback":null,"children":"$Lf"}]}]}]]}],false]],"m":"$undefined","G":["$10",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/26108d099754a71e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]]],"s":false,"S":true}
11:I[69397,["/_next/static/chunks/27842a9bf1956628.js","/_next/static/chunks/2d6d5be5a4d0b156.js","/_next/static/chunks/d4739044ea2ee7bb.js","/_next/static/chunks/89106ff1684e124a.js"],"default"]
12:I[45678,["/_next/static/chunks/27842a9bf1956628.js","/_next/static/chunks/2d6d5be5a4d0b156.js","/_next/static/chunks/d4739044ea2ee7bb.js","/_next/static/chunks/89106ff1684e124a.js"],"default"]
13:I[93871,["/_next/static/chunks/27842a9bf1956628.js","/_next/static/chunks/2d6d5be5a4d0b156.js","/_next/static/chunks/d4739044ea2ee7bb.js","/_next/static/chunks/89106ff1684e124a.js"],"default"]
14:T24e8,<h1 id="heading-0">代码高亮功能测试</h1>
<p>这个页面用于测试博客系统的代码高亮功能，包含多种编程语言的代码示例。</p>
<h2 id="heading-1">JavaScript 示例</h2>
<pre><code class="language-javascript" data-language="javascript">// JavaScript 代码示例
const greeting = "Hello, World!";
const numbers = [1, 2, 3, 4, 5];

function calculateSum(arr) {
  return arr.reduce((sum, num) => sum + num, 0);
}

// 异步函数示例
async function fetchData(url) {
  try {
    const response = await fetch(url);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('获取数据失败:', error);
    throw error;
  }
}

class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  
  introduce() {
    return `我是 ${this.name}，今年 ${this.age} 岁。`;
  }
}
</code></pre>
<h2 id="heading-2">TypeScript 示例</h2>
<pre><code class="language-typescript" data-language="typescript">// TypeScript 代码示例
interface User {
  id: number;
  name: string;
  email: string;
  isActive: boolean;
}

type UserWithoutId = Omit&#x3C;User, 'id'>;

class UserService {
  private users: User[] = [];
  
  constructor() {
    this.users = [];
  }
  
  addUser(userData: UserWithoutId): User {
    const newUser: User = {
      id: this.generateId(),
      ...userData
    };
    
    this.users.push(newUser);
    return newUser;
  }
  
  private generateId(): number {
    return Math.max(...this.users.map(u => u.id), 0) + 1;
  }
  
  findUserById(id: number): User | undefined {
    return this.users.find(user => user.id === id);
  }
}
</code></pre>
<h2 id="heading-3">React JSX 示例</h2>
<pre><code class="language-jsx" data-language="jsx">// React 组件示例
import React, { useState, useEffect } from 'react';

interface TodoItem {
  id: number;
  text: string;
  completed: boolean;
}

const TodoApp: React.FC = () => {
  const [todos, setTodos] = useState&#x3C;TodoItem[]>([]);
  const [inputValue, setInputValue] = useState('');

  useEffect(() => {
    // 从本地存储加载数据
    const savedTodos = localStorage.getItem('todos');
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos));
    }
  }, []);

  const addTodo = () => {
    if (inputValue.trim()) {
      const newTodo: TodoItem = {
        id: Date.now(),
        text: inputValue.trim(),
        completed: false
      };
      
      const updatedTodos = [...todos, newTodo];
      setTodos(updatedTodos);
      localStorage.setItem('todos', JSON.stringify(updatedTodos));
      setInputValue('');
    }
  };

  return (
    &#x3C;div className="todo-app">
      &#x3C;h1>待办事项&#x3C;/h1>
      &#x3C;div className="input-section">
        &#x3C;input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' &#x26;&#x26; addTodo()}
          placeholder="添加新的待办事项..."
        />
        &#x3C;button onClick={addTodo}>添加&#x3C;/button>
      &#x3C;/div>
      
      &#x3C;ul className="todo-list">
        {todos.map(todo => (
          &#x3C;li key={todo.id} className={todo.completed ? 'completed' : ''}>
            &#x3C;span>{todo.text}&#x3C;/span>
          &#x3C;/li>
        ))}
      &#x3C;/ul>
    &#x3C;/div>
  );
};

export default TodoApp;
</code></pre>
<h2 id="heading-4">Python 示例</h2>
<pre><code class="language-python" data-language="python"># Python 代码示例
import asyncio
import aiohttp
from typing import List, Dict, Optional
from dataclasses import dataclass
from datetime import datetime

@dataclass
class Article:
    title: str
    content: str
    author: str
    created_at: datetime
    tags: List[str]

class BlogService:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.articles: List[Article] = []
    
    async def fetch_articles(self) -> List[Dict]:
        """异步获取文章列表"""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{self.base_url}/articles") as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        raise Exception(f"HTTP {response.status}")
            except Exception as e:
                print(f"获取文章失败: {e}")
                return []
    
    def filter_articles_by_tag(self, tag: str) -> List[Article]:
        """根据标签过滤文章"""
        return [
            article for article in self.articles 
            if tag.lower() in [t.lower() for t in article.tags]
        ]
    
    def search_articles(self, keyword: str) -> List[Article]:
        """搜索文章"""
        keyword = keyword.lower()
        return [
            article for article in self.articles
            if keyword in article.title.lower() or keyword in article.content.lower()
        ]

# 使用示例
async def main():
    blog_service = BlogService("https://api.example.com")
    articles_data = await blog_service.fetch_articles()
    
    for data in articles_data:
        article = Article(
            title=data['title'],
            content=data['content'],
            author=data['author'],
            created_at=datetime.fromisoformat(data['created_at']),
            tags=data.get('tags', [])
        )
        blog_service.articles.append(article)
    
    # 搜索相关文章
    tech_articles = blog_service.filter_articles_by_tag('技术')
    print(f"找到 {len(tech_articles)} 篇技术相关文章")

if __name__ == "__main__":
    asyncio.run(main())
</code></pre>
<h2 id="heading-5">CSS 示例</h2>
<pre><code class="language-css" data-language="css">/* CSS 样式示例 */
:root {
  --primary-color: #3b82f6;
  --secondary-color: #64748b;
  --background-color: #f8fafc;
  --text-color: #1e293b;
  --border-radius: 0.5rem;
  --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', 'Helvetica Neue', Arial, sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
  line-height: 1.6;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

.card {
  background: white;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 1.5rem;
  margin-bottom: 1rem;
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
}

.btn {
  display: inline-block;
  padding: 0.75rem 1.5rem;
  background-color: var(--primary-color);
  color: white;
  text-decoration: none;
  border-radius: var(--border-radius);
  border: none;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  transition: background-color 0.2s ease-in-out;
}

.btn:hover {
  background-color: #2563eb;
}

.btn--secondary {
  background-color: var(--secondary-color);
}

.btn--secondary:hover {
  background-color: #475569;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .container {
    padding: 0 0.5rem;
  }
  
  .card {
    padding: 1rem;
  }
  
  .btn {
    width: 100%;
    text-align: center;
  }
}
</code></pre>
<h2 id="heading-6">JSON 示例</h2>
<pre><code class="language-json" data-language="json">{
  "name": "个人博客系统",
  "version": "1.0.0",
  "description": "使用 Next.js + TailwindCSS + Markdown 构建的现代化博客系统",
  "main": "src/app/page.tsx",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint src --ext .ts,.tsx",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "tailwindcss": "^3.3.0",
    "gray-matter": "^4.0.3",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1",
    "react-syntax-highlighter": "^15.6.6"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "typescript": "^5.0.0",
    "eslint": "^8.0.0",
    "eslint-config-next": "^14.0.0"
  },
  "keywords": [
    "博客",
    "Next.js",
    "React",
    "TailwindCSS",
    "Markdown",
    "TypeScript"
  ],
  "author": {
    "name": "开发者",
    "email": "developer@example.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/username/blog-system.git"
  }
}
</code></pre>
<h2 id="heading-7">总结</h2>
<p>这个测试页面包含了多种编程语言的代码示例：</p>
<ol>
<li><strong>JavaScript</strong> - 展示基础语法、异步编程和类定义</li>
<li><strong>TypeScript</strong> - 展示类型定义、接口和泛型</li>
<li><strong>React JSX</strong> - 展示现代 React 组件和 Hook 使用</li>
<li><strong>Python</strong> - 展示异步编程、数据类和类型注解</li>
<li><strong>CSS</strong> - 展示现代 CSS 特性和响应式设计</li>
<li><strong>JSON</strong> - 展示配置文件结构</li>
</ol>
<p>如果代码高亮功能正常工作，您应该能看到：</p>
<ul>
<li>不同的颜色用于关键字、字符串、注释等</li>
<li>语言标签显示在代码块的左上角</li>
<li>复制按钮显示在代码块的右上角</li>
<li>悬停时显示交互效果</li>
</ul>
<p>请测试复制功能和不同编程语言的语法高亮效果！</p>
6:["$","div",null,{"className":"min-h-screen flex flex-col","children":[["$","$L11",null,{"articleId":"code-highlight-test","articleTitle":"代码高亮功能测试"}],["$","$L12",null,{"allPosts":[{"id":"typography-showcase","title":"排版效果展示","date":"2024-01-30","excerpt":"展示博客系统优化后的各种排版元素效果，包括标题、段落、引用、列表、图片、表格、链接等。","tags":["排版","设计","测试"],"image":"https://images.unsplash.com/photo-1586717791821-3f44a563fa4c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80"},{"id":"tailwindcss-tips","title":"TailwindCSS 实用技巧分享","date":"2024-01-25","excerpt":"分享一些 TailwindCSS 的实用技巧和最佳实践，帮助你更高效地编写样式代码。","tags":["TailwindCSS","CSS","前端","样式"],"image":"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80"},{"id":"code-highlight-test","title":"代码高亮功能测试","date":"2024-01-25","excerpt":"测试博客系统的代码高亮功能，包含多种编程语言的示例。","tags":["测试","代码高亮","技术"],"image":""},{"id":"nextjs-development-guide","title":"Next.js 开发指南：从入门到实践","date":"2024-01-20","excerpt":"深入了解 Next.js 框架的核心特性，包括服务端渲染、静态生成和 API 路由等功能。","tags":["Next.js","React","前端开发","教程"],"image":"https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80"},{"id":"2025-9-7_go","title":"出海出海","date":"2024-01-20","excerpt":"了解出海的一些基础知识","tags":["出海"],"image":"https://images.unsplash.com/photo-1555066931-4365d14bab8c?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80"},{"id":"welcome","title":"test","date":"2024-01-15","excerpt":"这是我博客的第一篇文章，介绍了博客的功能和我的写作计划。","tags":["介绍","博客","开始"],"image":""},{"id":"welcome-to-my-blog","title":"欢迎来到我的博客","date":"2024-01-15","excerpt":"这是我博客的第一篇文章，介绍了博客的功能和我的写作计划。","tags":["介绍","博客","开始"],"image":"https://images.unsplash.com/photo-1499750310107-5fef28a66643?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2070&q=80"}]}],["$","div",null,{"className":"pt-16","children":[" ",["$","main",null,{"className":"flex-grow","children":[["$","article",null,{"className":"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-16","children":[["$","div",null,{"className":"mb-8","children":["$","$L5",null,{"href":"/","className":"inline-flex items-center text-blue-600 hover:text-blue-800 transition-colors","children":[["$","svg",null,{"className":"w-4 h-4 mr-2","fill":"none","stroke":"currentColor","viewBox":"0 0 24 24","children":["$","path",null,{"strokeLinecap":"round","strokeLinejoin":"round","strokeWidth":2,"d":"M15 19l-7-7 7-7"}]}],"返回首页"]}]}],["$","header",null,{"className":"mb-12","children":[["$","h1",null,{"className":"text-4xl font-bold text-gray-900 mb-4","children":"代码高亮功能测试"}],["$","div",null,{"className":"flex flex-wrap items-center gap-4 text-gray-600","children":[["$","time",null,{"className":"text-sm","children":"2024-01-25"}],["$","div",null,{"className":"flex flex-wrap gap-2","children":[["$","span","测试",{"className":"inline-block bg-blue-100 text-blue-800 text-xs px-3 py-1 rounded-full","children":"测试"}],["$","span","代码高亮",{"className":"inline-block bg-blue-100 text-blue-800 text-xs px-3 py-1 rounded-full","children":"代码高亮"}],["$","span","技术",{"className":"inline-block bg-blue-100 text-blue-800 text-xs px-3 py-1 rounded-full","children":"技术"}]]}]]}]]}],["$","$L13",null,{"children":["$","div",null,{"className":"typography-content max-w-none text-gray-700 leading-relaxed","dangerouslySetInnerHTML":{"__html":"$14"}}]}],"$L15"]}],"$L16","$L17"]}]]}],"$L18"]}]
19:I[46311,["/_next/static/chunks/27842a9bf1956628.js","/_next/static/chunks/2d6d5be5a4d0b156.js","/_next/static/chunks/d4739044ea2ee7bb.js","/_next/static/chunks/89106ff1684e124a.js"],"default"]
1b:I[8675,["/_next/static/chunks/27842a9bf1956628.js","/_next/static/chunks/2d6d5be5a4d0b156.js","/_next/static/chunks/d4739044ea2ee7bb.js","/_next/static/chunks/89106ff1684e124a.js"],"default"]
15:["$","div",null,{"className":"mt-16 pt-8 border-t border-gray-200","children":["$","div",null,{"className":"text-center","children":["$","$L5",null,{"href":"/","className":"inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors","children":"查看更多文章"}]}]}]
1a:T24e8,<h1 id="heading-0">代码高亮功能测试</h1>
<p>这个页面用于测试博客系统的代码高亮功能，包含多种编程语言的代码示例。</p>
<h2 id="heading-1">JavaScript 示例</h2>
<pre><code class="language-javascript" data-language="javascript">// JavaScript 代码示例
const greeting = "Hello, World!";
const numbers = [1, 2, 3, 4, 5];

function calculateSum(arr) {
  return arr.reduce((sum, num) => sum + num, 0);
}

// 异步函数示例
async function fetchData(url) {
  try {
    const response = await fetch(url);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('获取数据失败:', error);
    throw error;
  }
}

class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  
  introduce() {
    return `我是 ${this.name}，今年 ${this.age} 岁。`;
  }
}
</code></pre>
<h2 id="heading-2">TypeScript 示例</h2>
<pre><code class="language-typescript" data-language="typescript">// TypeScript 代码示例
interface User {
  id: number;
  name: string;
  email: string;
  isActive: boolean;
}

type UserWithoutId = Omit&#x3C;User, 'id'>;

class UserService {
  private users: User[] = [];
  
  constructor() {
    this.users = [];
  }
  
  addUser(userData: UserWithoutId): User {
    const newUser: User = {
      id: this.generateId(),
      ...userData
    };
    
    this.users.push(newUser);
    return newUser;
  }
  
  private generateId(): number {
    return Math.max(...this.users.map(u => u.id), 0) + 1;
  }
  
  findUserById(id: number): User | undefined {
    return this.users.find(user => user.id === id);
  }
}
</code></pre>
<h2 id="heading-3">React JSX 示例</h2>
<pre><code class="language-jsx" data-language="jsx">// React 组件示例
import React, { useState, useEffect } from 'react';

interface TodoItem {
  id: number;
  text: string;
  completed: boolean;
}

const TodoApp: React.FC = () => {
  const [todos, setTodos] = useState&#x3C;TodoItem[]>([]);
  const [inputValue, setInputValue] = useState('');

  useEffect(() => {
    // 从本地存储加载数据
    const savedTodos = localStorage.getItem('todos');
    if (savedTodos) {
      setTodos(JSON.parse(savedTodos));
    }
  }, []);

  const addTodo = () => {
    if (inputValue.trim()) {
      const newTodo: TodoItem = {
        id: Date.now(),
        text: inputValue.trim(),
        completed: false
      };
      
      const updatedTodos = [...todos, newTodo];
      setTodos(updatedTodos);
      localStorage.setItem('todos', JSON.stringify(updatedTodos));
      setInputValue('');
    }
  };

  return (
    &#x3C;div className="todo-app">
      &#x3C;h1>待办事项&#x3C;/h1>
      &#x3C;div className="input-section">
        &#x3C;input
          type="text"
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyPress={(e) => e.key === 'Enter' &#x26;&#x26; addTodo()}
          placeholder="添加新的待办事项..."
        />
        &#x3C;button onClick={addTodo}>添加&#x3C;/button>
      &#x3C;/div>
      
      &#x3C;ul className="todo-list">
        {todos.map(todo => (
          &#x3C;li key={todo.id} className={todo.completed ? 'completed' : ''}>
            &#x3C;span>{todo.text}&#x3C;/span>
          &#x3C;/li>
        ))}
      &#x3C;/ul>
    &#x3C;/div>
  );
};

export default TodoApp;
</code></pre>
<h2 id="heading-4">Python 示例</h2>
<pre><code class="language-python" data-language="python"># Python 代码示例
import asyncio
import aiohttp
from typing import List, Dict, Optional
from dataclasses import dataclass
from datetime import datetime

@dataclass
class Article:
    title: str
    content: str
    author: str
    created_at: datetime
    tags: List[str]

class BlogService:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.articles: List[Article] = []
    
    async def fetch_articles(self) -> List[Dict]:
        """异步获取文章列表"""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{self.base_url}/articles") as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        raise Exception(f"HTTP {response.status}")
            except Exception as e:
                print(f"获取文章失败: {e}")
                return []
    
    def filter_articles_by_tag(self, tag: str) -> List[Article]:
        """根据标签过滤文章"""
        return [
            article for article in self.articles 
            if tag.lower() in [t.lower() for t in article.tags]
        ]
    
    def search_articles(self, keyword: str) -> List[Article]:
        """搜索文章"""
        keyword = keyword.lower()
        return [
            article for article in self.articles
            if keyword in article.title.lower() or keyword in article.content.lower()
        ]

# 使用示例
async def main():
    blog_service = BlogService("https://api.example.com")
    articles_data = await blog_service.fetch_articles()
    
    for data in articles_data:
        article = Article(
            title=data['title'],
            content=data['content'],
            author=data['author'],
            created_at=datetime.fromisoformat(data['created_at']),
            tags=data.get('tags', [])
        )
        blog_service.articles.append(article)
    
    # 搜索相关文章
    tech_articles = blog_service.filter_articles_by_tag('技术')
    print(f"找到 {len(tech_articles)} 篇技术相关文章")

if __name__ == "__main__":
    asyncio.run(main())
</code></pre>
<h2 id="heading-5">CSS 示例</h2>
<pre><code class="language-css" data-language="css">/* CSS 样式示例 */
:root {
  --primary-color: #3b82f6;
  --secondary-color: #64748b;
  --background-color: #f8fafc;
  --text-color: #1e293b;
  --border-radius: 0.5rem;
  --box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Inter', 'Helvetica Neue', Arial, sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
  line-height: 1.6;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

.card {
  background: white;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 1.5rem;
  margin-bottom: 1rem;
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.card:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.1);
}

.btn {
  display: inline-block;
  padding: 0.75rem 1.5rem;
  background-color: var(--primary-color);
  color: white;
  text-decoration: none;
  border-radius: var(--border-radius);
  border: none;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  transition: background-color 0.2s ease-in-out;
}

.btn:hover {
  background-color: #2563eb;
}

.btn--secondary {
  background-color: var(--secondary-color);
}

.btn--secondary:hover {
  background-color: #475569;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .container {
    padding: 0 0.5rem;
  }
  
  .card {
    padding: 1rem;
  }
  
  .btn {
    width: 100%;
    text-align: center;
  }
}
</code></pre>
<h2 id="heading-6">JSON 示例</h2>
<pre><code class="language-json" data-language="json">{
  "name": "个人博客系统",
  "version": "1.0.0",
  "description": "使用 Next.js + TailwindCSS + Markdown 构建的现代化博客系统",
  "main": "src/app/page.tsx",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint src --ext .ts,.tsx",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "next": "^14.0.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "tailwindcss": "^3.3.0",
    "gray-matter": "^4.0.3",
    "remark": "^15.0.1",
    "remark-html": "^16.0.1",
    "react-syntax-highlighter": "^15.6.6"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "typescript": "^5.0.0",
    "eslint": "^8.0.0",
    "eslint-config-next": "^14.0.0"
  },
  "keywords": [
    "博客",
    "Next.js",
    "React",
    "TailwindCSS",
    "Markdown",
    "TypeScript"
  ],
  "author": {
    "name": "开发者",
    "email": "developer@example.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/username/blog-system.git"
  }
}
</code></pre>
<h2 id="heading-7">总结</h2>
<p>这个测试页面包含了多种编程语言的代码示例：</p>
<ol>
<li><strong>JavaScript</strong> - 展示基础语法、异步编程和类定义</li>
<li><strong>TypeScript</strong> - 展示类型定义、接口和泛型</li>
<li><strong>React JSX</strong> - 展示现代 React 组件和 Hook 使用</li>
<li><strong>Python</strong> - 展示异步编程、数据类和类型注解</li>
<li><strong>CSS</strong> - 展示现代 CSS 特性和响应式设计</li>
<li><strong>JSON</strong> - 展示配置文件结构</li>
</ol>
<p>如果代码高亮功能正常工作，您应该能看到：</p>
<ul>
<li>不同的颜色用于关键字、字符串、注释等</li>
<li>语言标签显示在代码块的左上角</li>
<li>复制按钮显示在代码块的右上角</li>
<li>悬停时显示交互效果</li>
</ul>
<p>请测试复制功能和不同编程语言的语法高亮效果！</p>
16:["$","$L19",null,{"content":"$1a"}]
17:["$","$L1b",null,{}]
18:["$","footer",null,{"className":"bg-gray-50 border-t border-gray-200","children":["$","div",null,{"className":"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8","children":["$","div",null,{"className":"text-center","children":[["$","p",null,{"className":"text-gray-600 text-sm","children":"© 2024 我的博客. 保留所有权利."}],["$","p",null,{"className":"text-gray-500 text-xs mt-2","children":"使用 Next.js + TailwindCSS + Markdown 构建"}]]}]}]}]
c:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
8:null
1c:I[27201,["/_next/static/chunks/ff1a16fafef87110.js","/_next/static/chunks/7dd66bdf8a7e5707.js"],"IconMark"]
a:{"metadata":[["$","title","0",{"children":"我的博客 - 技术分享与思考"}],["$","meta","1",{"name":"description","content":"分享技术文章、编程经验和开发心得的个人博客"}],["$","meta","2",{"name":"author","content":"博客作者"}],["$","meta","3",{"name":"keywords","content":"技术博客,编程,开发,Next.js,React,TypeScript"}],["$","meta","4",{"name":"creator","content":"博客作者"}],["$","meta","5",{"name":"robots","content":"index, follow"}],["$","meta","6",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","7",{"property":"og:title","content":"我的博客 - 技术分享与思考"}],["$","meta","8",{"property":"og:description","content":"分享技术文章、编程经验和开发心得的个人博客"}],["$","meta","9",{"property":"og:url","content":"http://localhost:3000/"}],["$","meta","10",{"property":"og:site_name","content":"我的博客"}],["$","meta","11",{"property":"og:locale","content":"zh_CN"}],["$","meta","12",{"property":"og:type","content":"website"}],["$","meta","13",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","14",{"name":"twitter:title","content":"我的博客 - 技术分享与思考"}],["$","meta","15",{"name":"twitter:description","content":"分享技术文章、编程经验和开发心得的个人博客"}],["$","link","16",{"rel":"icon","href":"/favicon.ico?favicon.0b3bf435.ico","sizes":"256x256","type":"image/x-icon"}],["$","$L1c","17",{}]],"error":null,"digest":"$undefined"}
f:"$a:metadata"
